import {
  IGet{{pascalCase name}}ByIdRepository,
  IGet{{pascalCase name}}ByNameRepository,
  IUpdate{{pascalCase name}}Repository,
} from '@/domains/{{dashCase name}}/usecases/repos';
import {
  {{pascalCase name}}NotFoundException,
  {{pascalCase name}}AlreadyExistsException,
} from '@/domains/{{dashCase name}}/usecases/exceptions';
import {
  {{pascalCase name}},
} from '@/domains/{{dashCase name}}/entities';



export interface IUpdate{{pascalCase name}}ByIdUsecase {
  execute(
    updateParams: IUpdate{{pascalCase name}}ByIdUsecase.Params,
  ): Promise<IUpdate{{pascalCase name}}ByIdUsecase.Result>;
}

export namespace IUpdate{{pascalCase name}}ByIdUsecase {
  export type Params = {
    id: string;
    paramsToUpdate: {
      name?: string;
      enabled?: boolean;
    };
  };
  export type Result = {{pascalCase name}};
}

export class Update{{pascalCase name}}ByIdUsecase implements IUpdate{{pascalCase name}}ByIdUsecase {


  constructor(
    private readonly get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    private readonly get{{pascalCase name}}ByNameRepository: IGet{{pascalCase name}}ByNameRepository,
    private readonly update{{pascalCase name}}Repository: IUpdate{{pascalCase name}}Repository,

  ) {

  }

  async execute(
    updateParams: IUpdate{{pascalCase name}}ByIdUsecase.Params,
  ): Promise<IUpdate{{pascalCase name}}ByIdUsecase.Result> {
    console.log({ message: 'Request received', data: updateParams });

    const { id, paramsToUpdate } = updateParams;

    const {{camelCase name}}Exists = await this.get{{pascalCase name}}ByIdRepository.get(id);

    if (!{{camelCase name}}Exists) {
      console.log({
        message: '{{pascalCase name}} found',
        data: updateParams,
      });

      throw new {{pascalCase name}}NotFoundException({ id });
    }

    console.log({
      message: '{{pascalCase name}} found',
      data: {{camelCase name}}Exists,
    });

    const {{camelCase name}}ToUpdate = new {{pascalCase name}}({
      ...{{camelCase name}}Exists,
      ...paramsToUpdate,
    });

    if (paramsToUpdate.name) {
      const is{{pascalCase name}} = await this.get{{pascalCase name}}ByNameRepository.get(
        paramsToUpdate.name
      );

      if (is{{pascalCase name}} && is{{pascalCase name}}.id !== id) {
       console.log({
          message: '{{pascalCase name}} already exist',
          data: is{{pascalCase name}},
        });

        throw new {{pascalCase name}}AlreadyExistsException({
          name: {{camelCase name}}ToUpdate.name,
        });
      }
    }

    const {{camelCase name}}Updated = await this.update{{pascalCase name}}Repository.update(
      {{camelCase name}}ToUpdate,
    );

    console.log({
      message: '{{pascalCase name}} updated',
      data: {{camelCase name}}Updated,
    });

    return {{camelCase name}}Updated;
  }
}
