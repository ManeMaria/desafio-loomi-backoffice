import {
  {{pascalCase name}},
  IGet{{pascalCase name}}ByIdRepository,
  IUpdate{{pascalCase name}}Repository,
  {{pascalCase name}}NotFoundException,
} from '@/domains/{{dashCase name}}';

import { ILoggerLocal } from '@/shared/protocols';

export interface IUpdate{{pascalCase name}}ByIdUsecase {
  execute(
    updateParams: IUpdate{{pascalCase name}}ByIdUsecase.Params
  ): Promise<IUpdate{{pascalCase name}}ByIdUsecase.Result>;
}

export namespace IUpdate{{pascalCase name}}ByIdUsecase {
  export type Params = {
    id: string;
    paramsToUpdate: {
      name?: string;
      enabled?: boolean;
    };
  };
  export type Result = {{pascalCase name}};
}

export class Update{{pascalCase name}}ByIdUsecase implements IUpdate{{pascalCase name}}ByIdUsecase {
  private logger: ILoggerLocal;

  constructor(
    private readonly get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    private readonly update{{pascalCase name}}Repository: IUpdate{{pascalCase name}}Repository,
    logger: ILoggerLocal
  ) {
    this.logger = logger.child({ usecase: 'update-{{dashCase name}}-by-id'})
  }

  async execute(
    updateParams: IUpdate{{pascalCase name}}ByIdUsecase.Params
  ): Promise<IUpdate{{pascalCase name}}ByIdUsecase.Result> {
    this.logger.logDebug({ message: 'Request received', data: updateParams });

    const { id, paramsToUpdate } = updateParams;

    const {{camelCase name}}Exists = await this.get{{pascalCase name}}ByIdRepository.get(id);

    if (!{{camelCase name}}Exists) {
      throw new {{pascalCase name}}NotFoundException({ id });
    }

    this.logger.logDebug({ message: '{{pascalCase name}} found', data: {{camelCase name}}Exists });

    const {{camelCase name}}ToUpdate = new {{pascalCase name}}({ ...{{camelCase name}}Exists, ...paramsToUpdate });

    const {{camelCase name}}Updated = await this.update{{pascalCase name}}Repository.update(
      {{camelCase name}}ToUpdate
    );

    this.logger.logDebug({ message: '{{pascalCase name}} updated', data: {{camelCase name}}Updated });

    return {{camelCase name}}Updated;
  }
}
