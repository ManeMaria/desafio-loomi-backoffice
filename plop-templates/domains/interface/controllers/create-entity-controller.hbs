import { Validation } from '@/shared/interface/validation/protocols';
import {
  {{pascalCase name}},
  Create{{pascalCase name}}Usecase,
  IGet{{pascalCase name}}ByNameRepository,
  ISave{{pascalCase name}}Repository,
} from '@/domains/{{dashCase name}}';
import { ValidationException } from '@/shared/helpers';
import { ILoggerLocal, IUuidGenerator } from '@/shared/protocols';

export interface Create{{pascalCase name}}Request {
  name: string;
}

export type Create{{pascalCase name}}Response = {{pascalCase name}};

export class Create{{pascalCase name}}Controller {
  private usecase: Create{{pascalCase name}}Usecase;
  private logger: ILoggerLocal;

  constructor(
    get{{pascalCase name}}ByNameRepository: IGet{{pascalCase name}}ByNameRepository,
    uuidGenerator: IUuidGenerator,
    save{{pascalCase name}}Repository: ISave{{pascalCase name}}Repository,
    private readonly validation: Validation,
    logger: ILoggerLocal
  ) {
    this.usecase = new Create{{pascalCase name}}Usecase(
      get{{pascalCase name}}ByNameRepository,
      uuidGenerator,
      save{{pascalCase name}}Repository,
      logger
    );

    this.logger = logger.child({ controller: 'create-{{dashCase name}}'})
  }

  async execute(request: Create{{pascalCase name}}Request): Promise<Create{{pascalCase name}}Response> {
    this.logger.logDebug({ message: 'Request received', data: request });

    const { name } = request;

    const hasError = this.validation.validate({
      name
    });

    if (hasError) {
      throw new ValidationException(hasError);
    }

    this.logger.logDebug({ message: 'Params validated'})

    const {{camelCase name}}Created = await this.usecase.execute({ name });

    this.logger.logDebug({ message: '{{pascalCase name}} created', data: {{camelCase name}}Created })

    return {{camelCase name}}Created;
  }
}
