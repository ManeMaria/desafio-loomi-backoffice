import { Validation } from '@/shared/interface/validation/protocols';
import {
  IDelete{{pascalCase name}}ByIdRepository,
  IGet{{pascalCase name}}ByIdRepository,
  Delete{{pascalCase name}}ByIdUsecase,
} from '@/domains/{{dashCase name}}';
import { ValidationException } from '@/shared/helpers';

export interface Delete{{pascalCase name}}ByIdRequest {
  id: string;
}

export type Delete{{pascalCase name}}ByIdResponse = void;

export class Delete{{pascalCase name}}ByIdController {
  private usecase: Delete{{pascalCase name}}ByIdUsecase;

  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    delete{{pascalCase name}}ByIdRepository: IDelete{{pascalCase name}}ByIdRepository,
    private readonly validation: Validation
  ) {
    this.usecase = new Delete{{pascalCase name}}ByIdUsecase(
      get{{pascalCase name}}ByIdRepository,
      delete{{pascalCase name}}ByIdRepository
    );
  }

  async execute(
    request: Delete{{pascalCase name}}ByIdRequest
  ): Promise<Delete{{pascalCase name}}ByIdResponse> {
    const { id } = request;

    const hasError = this.validation.validate({ id });

    if (hasError) {
      throw new ValidationException(hasError);
    }

    await this.usecase.execute(id);
  }
}
