import { Validation } from '@/shared/interface/validation/protocols';
import {
  IGet{{pascalCase name}}ByIdRepository,
  IUpdate{{pascalCase name}}Repository,
  Update{{pascalCase name}}ByIdUsecase,
  {{pascalCase name}},
} from '@/domains/{{dashCase name}}';
import { ValidationException } from '@/shared/helpers';
import { ILoggerLocal } from '@/shared/protocols';

export interface Update{{pascalCase name}}ByIdRequest {
  id: string;
  paramsToUpdate: {
    name?: string;
    enabled?: boolean;
  };
}

export type Update{{pascalCase name}}ByIdResponse = {{pascalCase name}};

export class Update{{pascalCase name}}ByIdController {
  private usecase: Update{{pascalCase name}}ByIdUsecase;
  private logger: ILoggerLocal;

  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    update{{pascalCase name}}Repository: IUpdate{{pascalCase name}}Repository,
    private readonly validation: Validation,
    logger: ILoggerLocal
  ) {
    this.usecase = new Update{{pascalCase name}}ByIdUsecase(
      get{{pascalCase name}}ByIdRepository,
      update{{pascalCase name}}Repository,
      logger
    );

    this.logger = logger.child({ controller: 'update-{{dashCase name}}-by-id'})
  }

  async execute(
    request: Update{{pascalCase name}}ByIdRequest
  ): Promise<Update{{pascalCase name}}ByIdResponse> {
    this.logger.logDebug({ message: 'Request received', data: request });

    const { id, paramsToUpdate } = request;

    const { name, enabled } = paramsToUpdate;

    const hasErrors = this.validation.validate({
      id,
      name,
      enabled
    });

    if (hasErrors) {
      throw new ValidationException(hasErrors);
    }

    this.logger.logDebug({ message: 'Params validated'})

    const {{camelCase name}}Updated = await this.usecase.execute({ id, paramsToUpdate });

    this.logger.logDebug({ message: '{{pascalCase name}} updated', data: {{camelCase name}}Updated })

    return {{camelCase name}}Updated;
  }
}
