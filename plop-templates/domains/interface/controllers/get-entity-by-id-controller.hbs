import { Validation } from '@/shared/interface/validation/protocols';
import {
  {{pascalCase name}}DTO,
  Get{{pascalCase name}}ByIdUsecase,
  IGet{{pascalCase name}}ByIdRepository,
  {{pascalCase name}}Transformer,
} from '@/domains/{{dashCase name}}';
import { ValidationException } from '@/shared/helpers';
import { ILoggerLocal } from '@/shared/protocols';

export interface Get{{pascalCase name}}ByIdRequest {
  id: string;
}

export type Get{{pascalCase name}}ByIdResponse = { {{camelCase name}}: {{pascalCase name}}DTO } | null;

export class Get{{pascalCase name}}ByIdController {
  private usecase: Get{{pascalCase name}}ByIdUsecase;
  private logger: ILoggerLocal;

  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    private readonly validation: Validation,
    logger: ILoggerLocal
  ) {
    this.usecase = new Get{{pascalCase name}}ByIdUsecase(
      get{{pascalCase name}}ByIdRepository,
      logger
    );

    this.logger = logger.child({ controller: 'get-{{dashCase name}}-by-id'})
  }

  async execute(request: Get{{pascalCase name}}ByIdRequest): Promise<Get{{pascalCase name}}ByIdResponse> {
    this.logger.logDebug({ message: 'Request received', data: request });

    const { id } = request;

    const hasErrors = this.validation.validate(request);

    if (hasErrors) {
      throw new ValidationException(hasErrors);
    }

    this.logger.logDebug({ message: 'Params validated'})

    const {{camelCase name}} = await this.usecase.execute(id);

    this.logger.logDebug({ message: '{{pascalCase name}} found', data: {{camelCase name}} })

    if (!{{camelCase name}}) {
      return null;
    }

    const {{camelCase name}}DTO = {{pascalCase name}}Transformer.generateDTO({{camelCase name}});


    return { {{camelCase name}}: {{camelCase name}}DTO };
  }
}
