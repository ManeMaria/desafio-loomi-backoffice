import {
  Get{{pascalCase name}}ByIdUsecase,
} from '@/domains/{{dashCase name}}/usecases';
import {
  IGet{{pascalCase name}}ByIdRepository,
} from '@/domains/{{dashCase name}}/usecases/repos';
import {
  {{pascalCase name}}DefaultPresenter,
  {{pascalCase name}}Transformers,
} from '@/domains/{{dashCase name}}/interface/presenters';


import { ValidationException } from '@/shared/helpers';
import { Validation } from '@/shared/interface/validation/protocols';

export interface Get{{pascalCase name}}ByIdRequest {
  id: string;
}

export type Get{{pascalCase name}}ByIdResponse = { {{camelCase name}}: {{pascalCase name}}DefaultPresenter } | null;

export class Get{{pascalCase name}}ByIdController {
  private usecase: Get{{pascalCase name}}ByIdUsecase;


  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    private readonly validation: Validation,

  ) {
    this.usecase = new Get{{pascalCase name}}ByIdUsecase(
      get{{pascalCase name}}ByIdRepository,

    );


  }

  async execute(
    request: Get{{pascalCase name}}ByIdRequest
  ): Promise<Get{{pascalCase name}}ByIdResponse> {
    console.log({ message: 'Request received', data: request });

    const { id } = request;

    const hasErrors = this.validation.validate(request);

    if (hasErrors) {
      throw new ValidationException(hasErrors);
    }

    console.log({ message: 'Params validated' });

    const {{camelCase name}} = await this.usecase.execute(id);

    console.log({
      message: '{{pascalCase name}} found',
      data: {{camelCase name}},
    });

    if (!{{camelCase name}}) {
      return null;
    }

    const {{camelCase name}}DefaultPresenter =
      {{pascalCase name}}Transformers.generateDefaultPresenter({{camelCase name}});

    return { {{camelCase name}}: {{camelCase name}}DefaultPresenter };
  }
}
