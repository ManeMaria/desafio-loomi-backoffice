import { {{pascalCase feature}}Controller } from '@/domains/{{dashCase name}}/interface/controllers';

// import { Validation } from '@/shared/interface/validation/protocols';
import { EventListener } from '@/shared/interface/websocket/protocols';
import { IEventEmitterService } from '@/shared/interface/websocket/services';


export interface Event{{pascalCase feature}}Props {
  handshake?: string;
}

export class Event{{pascalCase feature}}Listener implements EventListener {

  private controller: {{pascalCase feature}}Controller;


  constructor(
    socketEventEmmiterService: IEventEmitterService,
    // validation: Validation,

  ) {
    this.controller = new {{pascalCase feature}}Controller(
      socketEventEmmiterService,
      // validation,

    );


  }

  async perform(eventProps: Event{{pascalCase feature}}Props): Promise<void> {
    console.log({ message: 'Props received', data: eventProps });

    const { handshake } = eventProps;

    try {
      await this.controller.execute({ handshake });


    } catch (error) {

      // handle with event errors (or not...)
    }
  }
}
