import { badRequest, ok, serverError } from '@/shared/interface/http/helpers';
import {
  HttpController,
  HttpResponse,
} from '@/shared/interface/http/protocols';
import { Validation } from '@/shared/interface/validation/protocols';
import {
  Get{{pascalCase name}}ByIdController,
  IGet{{pascalCase name}}ByIdRepository,
} from '@/domains/{{dashCase name}}';
import { ValidationException } from '@/shared/helpers';

export interface HttpGet{{pascalCase name}}ByIdRequest {
  id: string;
}

export class HttpGet{{pascalCase name}}ByIdController implements HttpController {
  private controller: Get{{pascalCase name}}ByIdController;

  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    validation: Validation
  ) {
    this.controller = new Get{{pascalCase name}}ByIdController(
      get{{pascalCase name}}ByIdRepository,
      validation
    );
  }

  async handle(httpRequest: HttpGet{{pascalCase name}}ByIdRequest): Promise<HttpResponse> {
    const { id } = httpRequest;

    try {
      const {{camelCase name}} = await this.controller.execute({ id });

      return ok({{camelCase name}});
    } catch (error) {
      if (error instanceof ValidationException) {
        return badRequest(error);
      }

      return serverError(error as Error);
    }
  }
}
