import {
  IDelete{{pascalCase name}}ByIdRepository,
  IGet{{pascalCase name}}ByIdRepository,
} from '@/domains/{{dashCase name}}/usecases/repos';
import {
  {{pascalCase name}}NotFoundException,
} from '@/domains/{{dashCase name}}/usecases/exceptions';
import {
  Delete{{pascalCase name}}ByIdController,
} from '@/domains/{{dashCase name}}/interface/controllers';

import {
  HttpController,
  HttpResponse,
} from '@/shared/interface/http/protocols';
import {
  noContent,
  notFound,
  badRequest,
  serverError,
} from '@/shared/interface/http/helpers';

import { Validation } from '@/shared/interface/validation/protocols';
import { ValidationException } from '@/shared/helpers';

export interface HttpDelete{{pascalCase name}}ByIdRequest {
  id: string;
}

export class HttpDelete{{pascalCase name}}ByIdController implements HttpController {
  private controller: Delete{{pascalCase name}}ByIdController;


  constructor(
    get{{pascalCase name}}ByIdRepository: IGet{{pascalCase name}}ByIdRepository,
    delete{{pascalCase name}}ByIdRepository: IDelete{{pascalCase name}}ByIdRepository,
    validation: Validation,

  ) {
    this.controller = new Delete{{pascalCase name}}ByIdController(
      get{{pascalCase name}}ByIdRepository,
      delete{{pascalCase name}}ByIdRepository,
      validation,

    );


  }

  async handle(
    httpRequest: HttpDelete{{pascalCase name}}ByIdRequest
  ): Promise<HttpResponse> {
    console.log({ message: 'Request Received', data: httpRequest });

    const { id } = httpRequest;

    try {
      await this.controller.execute({ id });

      console.log({
        message: '{{pascalCase name}} deleted',
        data: { id },
      });

      return noContent();
    } catch (error) {
      if (error instanceof ValidationException) {
        return badRequest(error);
      }

      if (error instanceof {{pascalCase name}}NotFoundException) {
        return notFound(error);
      }

      return serverError(error as Error);
    }
  }
}
