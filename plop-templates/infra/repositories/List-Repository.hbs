import { PrismaClient } from '.prisma/client';
import {
  Count{{name}}sInDatabaseRepositoryError,
  List{{name}}sInDatabaseRepositoryError,
} from '@/application/errors/repositories/{{dashCase name}}';
import {
  Count{{name}}sInDatabaseRepository,
  List{{name}}sInDatabaseRepository,
} from '@/application/protocols/database/repositories/{{dashCase name}}';
import { prismaConnector } from '@/infra/database/orm/prisma';
import { PrismaFormatter } from '@/infra/database/orm/prisma/repositories/prisma-formatter';

export class PrismaList{{name}}sInDatabaseRepository
  implements List{{name}}sInDatabaseRepository, Count{{name}}sInDatabaseRepository
{
  private prismaConnection: PrismaClient;

  constructor() {
    this.prismaConnection = prismaConnector.connect();
  }

  async count{{name}}s(
    {{camelCase name}}Filter: Count{{name}}sInDatabaseRepository.Params
  ): Promise<Count{{name}}sInDatabaseRepository.Result> {
    try {
      const {{camelCase name}}filterObject = PrismaFormatter.formatFilter({{camelCase name}}Filter);

      const total{{name}}s = await this.prismaConnection.{{camelCase name}}.count({
        where: {{camelCase name}}filterObject,
      });

      return { total{{name}}s };
    } catch (error) {
      const errorCatched = error as Error;

      const { message } = errorCatched;

      throw new Count{{name}}sInDatabaseRepositoryError(message);
    }
  }

  async list{{name}}(
    {{camelCase name}}Filter: List{{name}}sInDatabaseRepository.Params
  ): Promise<List{{name}}sInDatabaseRepository.Result> {
    try {
      const { take, skip, orderBy, ...restOf{{name}}Filters } = {{camelCase name}}Filter;

      const {{camelCase name}}FilterObject = PrismaFormatter.formatFilter(restOf{{name}}Filters);
      const {{camelCase name}}FindOptions = PrismaFormatter.formatFindOptions({
        take,
        skip,
        orderBy,
      });

      // @ts-ignore
      const {{camelCase name}}s = await this.prismaConnection.{{camelCase name}}.findMany({
        where: {{camelCase name}}FilterObject,
        ...{{camelCase name}}FindOptions,
      });

      const { total{{name}}s } = await this.count{{name}}s(restOf{{name}}Filters);

      return { {{camelCase name}}s, total{{name}}s };
    } catch (error) {
      const errorCatched = error as Error;

      const { message } = errorCatched;

      throw new List{{name}}sInDatabaseRepositoryError(message);
    }
  }
}
