import { PrismaDelete{{pascalCase name}}ByIdRepository } from '@/domains/{{dashCase name}}/infra/prisma/repositories';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mockCreate{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaDelete{{pascalCase name}}ByIdRepository();

  return {
    sut,
  };
}

describe('Prisma delete a {{pascalCase name}} Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  })

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  it('should delete a {{camelCase name}} by it\'s id', async () => {
    const { sut } = makeSut();

    const {{camelCase name}}Created = await prismaTest?.{{camelCase name}}.create({
      data: mockCreate{{pascalCase name}}Params(),
    });

    await sut.delete({{camelCase name}}Created?.id || '');

    const {{camelCase name}}sInDataBase = await prismaTest?.{{camelCase name}}.count();

    expect({{camelCase name}}sInDataBase).toBe(0);
  });
});
