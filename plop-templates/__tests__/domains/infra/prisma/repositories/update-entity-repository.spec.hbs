import { PrismaUpdate{{pascalCase name}}Repository, {{pascalCase name}} } from '@/domains/{{dashCase name}}/infra/prisma/repositories';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mock{{pascalCase name}}Entity, mockUpdate{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaUpdate{{pascalCase name}}Repository();

  return {
    sut,
  };
}

describe('Prisma Update {{pascalCase name}} Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  });

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  test('Should update a {{camelCase name}}', async () => {
    const { sut } = makeSut();

    const fake{{pascalCase name}}Params = mock{{pascalCase name}}Entity();

    const fake{{pascalCase name}} = new {{pascalCase name}}(fake{{pascalCase name}}Params);

    // const { enabled, ...validParams } = fake{{pascalCase name}};
    const validParams = fake{{pascalCase name}};

    await prismaTest?.provider.create({ data: validParams });

    const { id, paramsToUpdate } = mockUpdate{{pascalCase name}}Params();

    const {{camelCase name}}Updated = await sut.update({
      ...fake{{pascalCase name}},
      ...paramsToUpdate,
      id,
    });

    const expectedResult = new {{pascalCase name}}({
      ...mock{{pascalCase name}}Entity(),
      ...paramsToUpdate,
      id: {{camelCase name}}Updated.id,
      createdAt: {{camelCase name}}Updated.createdAt,
      updatedAt: {{camelCase name}}Updated.updatedAt,
    });

    expect({{camelCase name}}Updated).toStrictEqual(expectedResult);
  });
});
