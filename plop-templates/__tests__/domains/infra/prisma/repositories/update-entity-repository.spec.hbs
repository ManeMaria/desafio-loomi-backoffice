import { PrismaUpdate{{pascalCase name}}Repository } from '@/domains/{{dashCase name}}';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mockCreate{{pascalCase name}}Params, mockUpdate{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaUpdate{{pascalCase name}}Repository();

  return {
    sut,
  };
}

describe('Prisma Update {{pascalCase name}} Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  });

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  test('Should update a {{camelCase name}}', async () => {
    const { sut } = makeSut();

    const fake{{pascalCase name}} = mockCreate{{pascalCase name}}Params();

    const {{camelCase name}}Created = await prismaTest?.{{camelCase name}}.create({ data: fake{{pascalCase name}} });

    const dataToBeUpdated = mockUpdate{{pascalCase name}}Params();
    dataToBeUpdated.id = {{camelCase name}}Created?.id;

    const {{camelCase name}}Updated = await sut.update(dataToBeUpdated);

    expect({{camelCase name}}Updated).toHaveProperty('id', dataToBeUpdated.id);
    expect({{camelCase name}}Updated).toHaveProperty('name', dataToBeUpdated.name);
    expect({{camelCase name}}Updated).toHaveProperty('enabled', dataToBeUpdated.enabled);
    expect({{camelCase name}}Updated).toHaveProperty('createdAt', dataToBeUpdated.createdAt);
    expect({{camelCase name}}Updated).toHaveProperty('updatedAt', dataToBeUpdated.updatedAt);
  });
});
