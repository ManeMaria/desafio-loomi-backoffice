import { PrismaGet{{pascalCase name}}ByIdRepository } from '@/domains/{{dashCase name}}';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mockCreate{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaGet{{pascalCase name}}ByIdRepository();

  return {
    sut,
  };
}

describe('Prisma Get {{pascalCase name}} by ID Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  });

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  it('should list a {{camelCase name}} by id', async () => {
    const { sut } = makeSut();

    const {{camelCase name}}Created = await prismaTest?.{{camelCase name}}.create({
      data: mockCreate{{pascalCase name}}Params(),
    });

    const {{camelCase name}} = await sut.get({{camelCase name}}Created?.id || '');

    expect({{camelCase name}}).toHaveProperty('name', {{camelCase name}}Created?.name);
    expect({{camelCase name}}).toHaveProperty('enabled', {{camelCase name}}Created?.enabled);
  });
});
