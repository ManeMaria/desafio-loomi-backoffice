import { PrismaGet{{pascalCase name}}sByFilterRepository } from '@/domains/{{dashCase name}}';
import { Pagination } from '@/shared/helpers';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mockCreate{{pascalCase name}}Params, mockList{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaGet{{pascalCase name}}sByFilterRepository();

  return {
    sut,
  };
}

describe('Prisma Get {{pascalCase name}}s by Filter Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  });

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  it('should list {{camelCase name}}s', async () => {
    const { sut } = makeSut();

    await prismaTest?.{{camelCase name}}.create({ data: { ...mockCreate{{pascalCase name}}Params() } });
    await prismaTest?.{{camelCase name}}.create({ data: { ...mockCreate{{pascalCase name}}Params() } });
    await prismaTest?.{{camelCase name}}.create({ data: { ...mockCreate{{pascalCase name}}Params() } });

    const fakeParams = mockList{{pascalCase name}}Params();

    const {{camelCase name}}s = await sut.get(fakeParams);

    expect({{camelCase name}}s).toHaveLength(3);
  });

  it('should return empty array if there no {{camelCase name}}s in database', async () => {
    const { sut } = makeSut();

    const fakeParams = mockList{{pascalCase name}}Params();

    const {{camelCase name}}s = await sut.get(fakeParams);

    expect({{camelCase name}}s).toHaveLength(0);
  });

  it('should filter {{camelCase name}}s like a elastic search', async () => {
    const { sut } = makeSut();

    for (const name of ['ABCDE', 'abce', 'abcd']) {
      await prismaTest?.{{camelCase name}}.create({
        data: {
          ...mockCreate{{pascalCase name}}Params(),
          name,
        },
      });
    }

    const {{camelCase name}}sInDataBase = await prismaTest?.{{camelCase name}}.count({});
    expect({{camelCase name}}sInDataBase).toBe(3);

    const fakeParams = mockList{{pascalCase name}}Params();

    const {{camelCase name}}s = await sut.get({
      ...fakeParams,
      filters: { name: 'abc' },
    });
    expect({{camelCase name}}s).toHaveLength(3);

    const {{camelCase name}}s2 = await sut.get({
      ...fakeParams,
      filters: { name: 'abcd' },
    });
    expect({{camelCase name}}s2).toHaveLength(2);
  });

  it('should paginate {{camelCase name}}s', async () => {
    const { sut } = makeSut();

    for (let i: number = 0; i < 10; i += 1) {
      const {{camelCase name}} = mockCreate{{pascalCase name}}Params();
      await prismaTest?.{{camelCase name}}.create({
        data: {
          ...{{camelCase name}},
          name: `{{dashCase name}}-${i}`,
        },
      });
    }

    const {{camelCase name}}sInDataBase = await prismaTest?.{{camelCase name}}.count();
    expect({{camelCase name}}sInDataBase).toBe(10);

    const fakeParams = mockList{{pascalCase name}}Params();

    const {{camelCase name}}s = await sut.get(fakeParams);
    expect({{camelCase name}}s).toHaveLength(10);

    const {{camelCase name}}s2 = await sut.get({
      ...fakeParams,
      pagination: new Pagination({ take: 5, skip: 5 }),
    });
    expect({{camelCase name}}s2).toHaveLength(5);

    const {{camelCase name}}s3 = await sut.get({
      ...fakeParams,
      pagination: new Pagination({ take: 1, skip: 10 }),
    });
    expect({{camelCase name}}s3).toHaveLength(0);

    const {{camelCase name}}s4 = await sut.get({
      ...fakeParams,
      pagination: new Pagination({ take: 0, skip: 10 }),
    });
    expect({{camelCase name}}s4).toHaveLength(0);

    const {{camelCase name}}s5 = await sut.get({
      ...fakeParams,
      pagination: new Pagination({ take: 10, skip: 0 }),
    });
    expect({{camelCase name}}s5).toHaveLength(10);

    const {{camelCase name}}s6 = await sut.get({
      ...fakeParams,
      pagination: new Pagination({ take: 10, skip: 8 }),
    });
    expect({{camelCase name}}s6).toHaveLength(2);
  });
});
