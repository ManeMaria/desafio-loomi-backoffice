import { PrismaSave{{pascalCase name}}Repository } from '@/domains/{{dashCase name}}';
import { prismaConnector } from '@/shared/infra/prisma/index';

import { mockCreate{{pascalCase name}}Params } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { PrismaClient } from '@prisma/client';

const makeSut = () => {
  const sut = new PrismaSave{{pascalCase name}}Repository();

  return {
    sut,
  };
}

describe('Prisma Save {{pascalCase name}} Repository', () => {
  let prismaTest: PrismaClient | null = null;
  beforeEach(async () => {
    prismaTest = prismaConnector.connect(process.env.DATABASE_TEST_URL);

    await prismaTest.{{camelCase name}}.deleteMany({});
  })

  afterEach(async () => {
    if (prismaTest) {
      await prismaTest.{{camelCase name}}.deleteMany({});
      await prismaTest.$disconnect();
    }
  });

  it('should create a {{camelCase name}}', async () => {
    const { sut } = makeSut();

    const fake{{pascalCase name}} = mockCreate{{pascalCase name}}Params();

    const {{camelCase name}}Created = await sut.save(fake{{pascalCase name}});

    expect({{camelCase name}}Created.id).toBeTruthy();
    expect({{camelCase name}}Created).toHaveProperty('id');
    expect({{camelCase name}}Created).toHaveProperty('name', fake{{pascalCase name}}.name);
    expect({{camelCase name}}Created).toHaveProperty('enabled', fake{{pascalCase name}}.enabled);
    expect({{camelCase name}}Created).toHaveProperty('createdAt');
    expect({{camelCase name}}Created).toHaveProperty('updatedAt');
  });
});
