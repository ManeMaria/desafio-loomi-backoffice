import { mockCreate{{pascalCase name}}Params, mock{{pascalCase name}}Entity } from '@/tests/domains/{{dashCase name}}/entities/mocks/{{dashCase name}}-mocks';
import { {{pascalCase name}} } from '@/domains/{{dashCase name}}/entities';
import { Create{{pascalCase name}}Usecase, ICreate{{pascalCase name}}Usecase } from '@/domains/{{dashCase name}}/usecases';
import { Save{{pascalCase name}}RepositorySpy, Get{{pascalCase name}}ByNameRepositorySpy } from '@/tests/domains/{{dashCase name}}/usecases/repos';
import { UUIDGeneratorAdapter } from '@/shared/infra/uuid';
import { pinoLoggerLocal } from '@/shared/infra/logs';

type SutTypes = {
  sut: ICreate{{pascalCase name}}Usecase;
  save{{pascalCase name}}RepositorySpy: Save{{pascalCase name}}RepositorySpy;
};

const makeSut = (): SutTypes => {
  const save{{pascalCase name}}RepositorySpy = new Save{{pascalCase name}}RepositorySpy();
  const get{{pascalCase name}}ByNameRepositorySpy = new Get{{pascalCase name}}ByNameRepositorySpy();
  const uuidGenerator = new UUIDGeneratorAdapter();

  const sut = new Create{{pascalCase name}}Usecase(
    get{{pascalCase name}}ByNameRepositorySpy,
    save{{pascalCase name}}RepositorySpy,
    uuidGenerator,
    pinoLoggerLocal,
  );

  return {
    sut,
    save{{pascalCase name}}RepositorySpy,
  };
}

describe('Create {{pascalCase name}} Service', () => {
  it('should call Create{{pascalCase name}}Repository with correct parameters', async () => {
    const { sut, save{{pascalCase name}}RepositorySpy } = makeSut();
    const create{{pascalCase name}}Spy = jest.spyOn(save{{pascalCase name}}RepositorySpy, 'save');

    const fake{{pascalCase name}} = mockCreate{{pascalCase name}}Params();

    await sut.execute(fake{{pascalCase name}});

    expect(create{{pascalCase name}}Spy).toBeCalled();
    expect(create{{pascalCase name}}Spy).toHaveReturned();
  });

  it('should throw if Create{{pascalCase name}}Repository throws', async () => {
    const { sut, save{{pascalCase name}}RepositorySpy } = makeSut();
    jest.spyOn(save{{pascalCase name}}RepositorySpy, 'save').mockImplementationOnce(() => {
      return Promise.reject(new Error());
    });

    const fake{{pascalCase name}} = mockCreate{{pascalCase name}}Params();

    const response = sut.execute(fake{{pascalCase name}});

    expect(response).rejects.toThrow();
  });

  it('should return a new {{pascalCase name}} with success', async () => {
    const { sut } = makeSut();

    const fake{{pascalCase name}} = mockCreate{{pascalCase name}}Params();

    const response = await sut.execute(fake{{pascalCase name}});

    const expectedResult = new {{pascalCase name}}({
      ...mock{{pascalCase name}}Entity(),
      id: response.id,
      createdAt: response.createdAt,
      updatedAt: response.updatedAt,
    });

    expect(response).toStrictEqual(expectedResult);
  });
});
