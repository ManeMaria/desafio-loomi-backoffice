import { Controller, HttpResponse } from '@/application/http-server/protocols';

import {
  badRequest,
  conflict,
  ok,
  serverError,
} from '@/application/http-server/helpers/http-helper';

import { Validation } from '@/presentation/validation/protocols';
import { Delete{{name}}Usecase } from '@/domain/usecases/{{dashCase name}}';
import { Delete{{name}}InDatabaseRepositoryError } from '@/application/errors/repositories/{{dashCase name}}';
import { Delete{{name}}InDatabaseServiceError } from '@/application/errors/services/{{dashCase name}}';

export class Delete{{name}}Controller implements Controller {
  private readonly validation: Validation;
  private readonly delete{{name}}Usecase: Delete{{name}}Usecase;

  constructor(validation: Validation, delete{{name}}Usecase: Delete{{name}}Usecase) {
    this.validation = validation;
    this.delete{{name}}Usecase = delete{{name}}Usecase;
  }

  async handle(
    httpRequest: Delete{{name}}Controller.Request
  ): Promise<HttpResponse> {
    try {
      const hasError = this.validation.validate(httpRequest);

      if (hasError) return badRequest(hasError);

      await this.delete{{name}}Usecase.delete(httpRequest);

      return ok();
    } catch (error) {
      const catchedError = error as Error;

      if (
        error instanceof Delete{{name}}InDatabaseServiceError ||
        error instanceof Delete{{name}}InDatabaseRepositoryError
      ) {
        return conflict(catchedError);
      }

      return serverError(catchedError);
    }
  }
}

export namespace Delete{{name}}Controller {
  export type Request = Delete{{name}}Usecase.Params;
}
