import { Controller, HttpResponse } from '@/presentation/http/protocols';

import {
  badRequest,
  conflict,
  serverError,
  updated,
} from '@/presentation/http/helpers/http-helper';

import { Validation } from '@/presentation/validation/protocols';
import { Update{{name}}Usecase } from '@/domain/usecases/{{lowerCase name}}';
import { Update{{name}}InDatabaseRepositoryError } from '@/application/errors/repositories/{{lowerCase name}}';
import { Update{{name}}InDatabaseServiceError } from '@/application/errors/services/{{lowerCase name}}';

export class Update{{name}}Controller implements Controller {
  private readonly validation: Validation;
  private readonly update{{name}}Usecase: Update{{name}}Usecase;

  constructor(validation: Validation, update{{name}}Usecase: Update{{name}}Usecase) {
    this.validation = validation;
    this.update{{name}}Usecase = update{{name}}Usecase;
  }

  async handle(
    httpRequest: Update{{name}}Controller.Request
  ): Promise<HttpResponse> {
    try {
      const hasError = this.validation.validate(httpRequest);

      if (hasError) return badRequest(hasError);

      const {{lowerCase name}}Updated = await this.update{{name}}Usecase.update(httpRequest);

      return updated({{lowerCase name}}Updated);
    } catch (error) {
      const catchedError = error as Error;

      if (
        error instanceof Update{{name}}InDatabaseServiceError ||
        error instanceof Update{{name}}InDatabaseRepositoryError
      ) {
        return conflict(catchedError);
      }

      return serverError(catchedError);
    }
  }
}

export namespace Update{{name}}Controller {
  export type Request = Update{{name}}Usecase.Params;
}
