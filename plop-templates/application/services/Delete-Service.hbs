import { List{{name}}sUsecase, Delete{{name}}Usecase } from '@/domain/usecases/{{lowerCase name}}';
import { Delete{{name}}InDatabaseRepository } from '@/application/protocols/database/repositories/{{lowerCase name}}';
import { Delete{{name}}InDatabaseServiceError } from '@/application/errors/services/{{lowerCase name}}';
import { Delete{{name}}FromCloudProvider } from '@/application/protocols/cloud/{{lowerCase name}}';

type Delete{{name}}InDatabaseAndCloudServiceInjectables = {
  list{{name}}sUsecase: List{{name}}sUsecase;
  delete{{name}}InDatabaseRepository: Delete{{name}}InDatabaseRepository;
};

class Delete{{name}}InDatabaseAndCloudService implements Delete{{name}}Usecase {
  private readonly list{{name}}sUsecase: List{{name}}sUsecase;
  private readonly delete{{name}}InDatabaseRepository: Delete{{name}}InDatabaseRepository;

  constructor({
    list{{name}}sUsecase,
    delete{{name}}InDatabaseRepository,
  }: Delete{{name}}InDatabaseAndCloudServiceInjectables) {
    this.delete{{name}}InDatabaseRepository = delete{{name}}InDatabaseRepository;
    this.list{{name}}sUsecase = list{{name}}sUsecase;
  }

  async delete(
    {{lowerCase name}}Params: Delete{{name}}Usecase.Params
  ): Promise<Delete{{name}}Usecase.Result> {
    const { userRequester, id } = {{lowerCase name}}Params;

    const { {{lowerCase name}}s, total{{name}}s } = await this.list{{name}}sUsecase.list({
      userRequester,
      id,
    });

    if (total{{name}}s === 0) {
      throw new Delete{{name}}InDatabaseServiceError('{{name}} not found');
    }

    const [{{lowerCase name}}] = {{lowerCase name}}s;

    await this.delete{{name}}InDatabaseRepository.delete{{name}}({{lowerCase name}});
  }
}

export { Delete{{name}}InDatabaseAndCloudService };
