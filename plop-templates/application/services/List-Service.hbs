import { List{{name}}sUsecase } from '@/domain/usecases/{{dashCase name}}';
import { List{{name}}sInDatabaseRepository } from '@/application/protocols/database/repositories/{{dashCase name}}';
import { {{name}} } from '@/domain/entities';

type List{{name}}sInDatabaseServiceInjectables = {
  list{{name}}sInDatabaseRepository: List{{name}}sInDatabaseRepository;
};

class List{{name}}sInDatabaseService implements List{{name}}sUsecase {
  private readonly list{{name}}sInDatabaseRepository: List{{name}}sInDatabaseRepository;

  constructor({
    list{{name}}sInDatabaseRepository,
  }: List{{name}}sInDatabaseServiceInjectables) {
    this.list{{name}}sInDatabaseRepository = list{{name}}sInDatabaseRepository;
  }

  async list(
    {{camelCase name}}Filters: List{{name}}sUsecase.Params
  ): Promise<List{{name}}sUsecase.Result> {
    const { userRequester, ...rest{{name}}Filters } = {{camelCase name}}Filters;

    const { {{camelCase name}}s, total{{name}}s } =
      await this.list{{name}}sInDatabaseRepository.list{{name}}(rest{{name}}Filters);

    if (total{{name}}s === 0) {
      return { {{camelCase name}}s: [], total{{name}}s: 0 };
    }

    const {{camelCase name}}sEntities = {{camelCase name}}s.map(({{camelCase name}}Inputs) => new {{name}}({{camelCase name}}Inputs));

    return { {{camelCase name}}s: {{camelCase name}}sEntities, total{{name}}s };
  }
}

export { List{{name}}sInDatabaseService };
